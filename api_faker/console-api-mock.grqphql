type PageInfo {
  endCursor: String @examples(values: ["Y3Vyc29yMw=="])
  hasNextPage: Boolean @examples(values: [true])
}

type Intention {
  name: String @fake(type:lorem, options:{loremSize:word})
  score: Int
}

type Action {
  source: String @examples(values: ["ai", "helper", "visitor"])
  name: String @fake(type:lorem, options:{loremSize:word})
  status: String @examples(values: ["done", "progress"])
}

type User {
  id: String @fake(type:uuid)
  name: String
  email: String @fake(type:email)
  avatar: String @fake(type:imageUrl)
  createdAt: String @fake(type:pastDate,options:{dateFormat:""})
  updatedAt: String @fake(type:pastDate,options:{dateFormat:""})
}

type Conversation {
  id: String @fake(type:uuid)
  visitor: String
  bot: String
  client: String
  status: String
  mode: String
  intentions: [Intention]
  actions: [Action]
  messages: [Message]
  supports: [Support]
  # messages will be returned in a MessageFeed object wrapper
  messages(
    first: Int,
    after: String,
    last: Int,
    before: String
  ): MessagesConnection 
  token: String
  createdAt: String @fake(type:pastDate,options:{dateFormat:""})
  updatedAt: String @fake(type:pastDate,options:{dateFormat:""})
}

type Message {
  id: String @fake(type:uuid)
  text: String @fake(type:lorem, options:{loremSize:words})
  source: String @examples(values: ["ai", "helper", "visitor"])
  sourceId: String
  destination: String
  destinationId: String
  bot: String
  client: String
  createdAt: String @fake(type:pastDate,options:{dateFormat:""})
  updatedAt: String @fake(type:pastDate,options:{dateFormat:""})
}

type MessagesConnection {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [MessagesEdge]
}

type MessagesEdge {
  cursor: String! @examples(values: ["Y3Vyc29yMw=="])
  node: Message
}


type ConversationsConnection {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [ConversationsEdge ]
}

type ConversationsEdge {
  cursor: String! @examples(values: ["Y3Vyc29yMw=="])
  node: Conversation
}

type ConversationsFeed {
   conversations(
    first: Int,
    after: String,
    last: Int,
    before: String
  ): ConversationsConnection 
}

type Bot {
  id: ID @fake(type:uuid)
  name: String @fake(type:word)
  token: String @fake(type:uuid)
  protocol: String  @examples(values: ["http", "https"])
  host: String @fake(type:url)
  mode: String @examples(values: ["auto", "semi", "manual"])
  client: String @fake(type:uuid)
  createdAt: String @fake(type:pastDate,options:{dateFormat:""})
  updatedAt: String @fake(type:pastDate,options:{dateFormat:""})
}

type Knowledge {
  id: String
  raw: String
  text: String
  bot: String
  createdAt: String @fake(type:pastDate,options:{dateFormat:""})
  updatedAt: String @fake(type:pastDate,options:{dateFormat:""})
}

type Support {
  id: String
  text: String
  conversation: String
  delay: Int
  client: String
  createdAt: String @fake(type:pastDate,options:{dateFormat:""})
  updatedAt: String @fake(type:pastDate,options:{dateFormat:""})
}


type UserMessage {
  id: ID @fake(type:uuid)
  type: String
  text: String
  action: String
}

type Query {
  ConversationsFeed(clientId: String, botId: String): ConversationsFeed
  conversations(clientId: String, botId: String): [Conversation]
  messages(conversationId: String, clientId: String): [Message]
  bots(clientId: String): [Bot]
  knowledge(clientId: String, botId: String): Knowledge
}

type ConversationEvent {
  id: String @fake(type:uuid)
}

type ConversationEventFeed {
  # cursor specifies the place in the list where we left off
  cursor: String!
  
  # this is a chunk of messages to be returned
  events: [ConversationEvent]!
}

input MessageInput {
  text: String!
  conversationId: String!
}

type Mutation {
  updateConversation(conversationId: String!): Conversation
  createMessage(input: MessageInput): Message
  createBot(clientId: String!, name: String!, url: String!): Bot
  updateKnowledge(clientId: String!, botId:String!, text: String!): Knowledge
  changeAccountPassword(clientId:String!):User
  closeAccount(clientId: String!): User
}

type Subscription {
  createConversation(clientId:String): Conversation
  updateConversation(clientId:String): Conversation
  createMessage(clientId:String): Message
  updateMessage(clientId:String): Message
  receiveSupport: String
  createSupport(conversationId:String): Support
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
